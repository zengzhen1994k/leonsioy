#!/bin/bash
#
# Leonid Kogan <leon@leonsio.com>
# Yet Another Homematic Management 
#
# LXC management script, create new lxc container from CCU2 image 
#

# Stop on Errors
set -e

# Hilfe Output
show_help ()
{
cat << EOF
YAHM LXC management script

Usage Example: 

./yahm-lxc [FLAG] COMMAND
./yahm-lxc  -n mycccu install

Flags:
-n        - LXC container name.
-f        - Force operation (no halt on errors).
-v        - Verbose output 

Commands:
install   - Create new lxc instance with actual ccu2 image.
update    - Updates lxc instance to the actual version.
remove    - Removes lxc instance.
EOF
exit 1
}
PARAMETER="fvn:"

# Include laden
source /opt/YAHM/share/include.sh

# Homematic URLs and fallback download links
curFWdl="http://update.homematic.com/firmware/download?cmd=download&product=HM-CCU2&serial=0"
checkVersion="http://update.homematic.com/firmware/download?cmd=js_check_version&serial=0&product=HM-CCU2"
curVersion=$(wget -qO- -T 3 -t 1  "$checkVersion" | cut -d"'" -f2)
if [ "$curVersion" = "" ] || [ "$curVersion" = "n/a" ] 
then
    curFWdl="http://www.eq-3.de/Downloads/Software/HM-CCU2-Firmware_Updates/HM-CCU2-${CCU2Version}/HM-CCU2-${CCU2Version}.tgz"
else
    CCU2Version=$curVersion
fi

remove_lxc_container()
{
    if [ `check_yahm_installed` -eq 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "No container installed"
    fi

    if [ `check_yahm_name $LXCNAME` -eq 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "Can not find $LXCNAME container"
    fi

    if [ $IS_FORCE -eq 1 ]
    then
        info "Entering force mode"
    fi

    info "Deleting installed YAHM container: $LXCNAME version: $CCU2Version To cancel this operation type CTRL+C you have 5 seconds..."
    countdown
    info "... to late ;)"

    progress "Stopping lxc container"
    lxc-stop -k -n $LXCNAME

    progress "Deleting LXC container"
    rm -rf ${LXC_ROOT}

    progress "Clean up"
    rm -rf ${YAHM_LIB}/*
}

create_lxc_container()
{
    if [ `check_yahm_installed` -eq 1 ] && [ $IS_FORCE -ne 1 ]
    then
        die "YAHM instance is already installed"
    fi

    if [ $IS_FORCE -eq 1 ] ; then
        progress "ATTENTION: FORCE-Switch is used, actual instance will be overwritten"
    fi

    # Compatibility Check
    if [ `yahm_compatibility $CCU2Version` -eq 1 ] && [ $IS_FORCE -ne 1 ]
    then
        die "We dont have any patches for this version, please make git pull and try again"
    fi

    info "Creating new lxc container name: $LXCNAME, version $CCU2Version"
    # Verzeichnis anlegen
    mkdir -p $LXC_ROOT
    mkdir -p $YAHM_TMP

    progress "Downloading CCU Firmware"
    EQ3_FW="${YAHM_TMP}/HM-CCU2-${CCU2Version}.tar.gz"
    wget $QUIET -O "$EQ3_FW" "$curFWdl" || info "Can not download file"
    if [ ! -f "$EQ3_FW" ] && [ $IS_FORCE -ne 1 ]
    then
       die "Can not download firmware. Are you connected to the internet?"
    fi

    if [ $(stat -c%s "${EQ3_FW}") -le 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "Can not download firmware. File size is to small, please take a look on ${EQ3_FW}"  
    fi

    progress "Extracting firmware"
    tar $VERBOSE -xzf $EQ3_FW -C $YAHM_TMP

    progress "Extract ubi image"
    $YAHM_DIR/share/tools/ubi_reader/ubi_extract_files.py $QUIET -k -o $LXC_ROOT "${YAHM_TMP}/rootfs.ubi"

    # most lxc commands use rootfs folder and not the config option
    ln -s $LXC_ROOT_FS $LXC_ROOT/rootfs

    progress "Cleanup CCU2 source"
    cd $LXC_ROOT_FS
    find . -iname '*.ftl' | xargs dos2unix $QUIET
    find . -iname '*.cgi' | xargs dos2unix $QUIET

    progress "Applying patch"
    cd $LXC_ROOT_FS
    patch $QUIET --input "${YAHM_DIR}/share/tools/patches/${CCU2Version}.patch" -p1

    progress "Applying scripts"
    cd $LXC_ROOT_FS
    sh "${YAHM_DIR}/share/tools/scripts/${CCU2Version}.sh"

    progress "Creating SD card"
    mkdir -p ${LXC_ROOT}/sd-mmcblk0
    touch ${LXC_ROOT}/sd-mmcblk0/.initialised

    # clean up download sources
    progress "Clean Up"
    rm -rf $YAHM_TMP

    # create lxc config file
    create_lxc_config

    info "Container is created, please use 'lxc-start -n ${LXCNAME} -d' to start and 'lxc-attach -n ${LXCNAME}' for console access"
    info "For network configuration see yahm-network script"

    echo $LXCNAME > /var/lib/yahm/container_name
    touch /var/lib/yahm/is_installed
}

create_lxc_config()
{
        # lxc config file
        progress "create lxc config file"
        cat > "${LXC_ROOT}/config" <<EOF
lxc.mount.entry = proc proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry = sysfs sys sysfs defaults  0 0
lxc.mount.entry = varfs var tmpfs defaults,size=196M 0 0
lxc.mount.entry = devpts dev/pts devpts defaults,newinstance 0 0
lxc.mount.entry = ${LXC_ROOT}/sd-mmcblk0  media/sd-mmcblk0/ none defaults,bind 0 0
lxc.utsname = ${LXCNAME}
lxc.start.auto = 1
lxc.tty = 1
lxc.pts = 1
lxc.cgroup.devices.allow = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
# /dev/pts/* - pts namespaces are "coming soon"
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
lxc.cgroup.devices.allow = c 10:200 rwm
lxc.rootfs = ${LXC_ROOT_FS}
#lxc.include = ${LXC_ROOT}/config.network
EOF
}

update_lxc_container()
{

    if [ `check_yahm_installed` -eq 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "YAHM is not installed"
    fi

    if [ `check_yahm_name $LXCNAME` -eq 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "Can not find $LXCNAME container"
    fi

    installed_version=`get_yahm_version ${LXCNAME}` 
    if [ $(ver $installed_version) -ge $(ver $CCU2Version) ] && [ $IS_FORCE -ne 1 ]
    then
        die "Installed version $installed_version is greater than or equal to avaible version $CCU2Version"
    fi

    if [ $IS_FORCE -ne 1 ] 
    then
        die "We can not update existing installation, please make backup of your data inside CCU2 gui and then run this script with -f."
    fi

    info "Update skript do not make any backup, your data will be removed!!!!"
    info "Updating to version $CCU2Version, existing installation will be overwritten. To cancel this operation type CTRL+C you have 5 seconds.... "
    countdown
    info "... to late ;)"

    progress "Backup old LXC config"
    mkdir -p ${YAHM_TMP}_conf/${LXCNAME}/
    cp ${LXC_ROOT}/conf* ${YAHM_TMP}_conf/${LXCNAME}/

    progress "Delete YAHM Container version: $installed_version"
    remove_lxc_container

    progress "Create new YAHM Container version: $CCU2Version"
    create_lxc_container

    progress "Restore old LXC config"
    cp ${YAHM_TMP}_conf/${LXCNAME}/conf* ${LXC_ROOT}/
    rm -rf ${YAHM_TMP}_conf/
}

if [[ $# != 1 ]]; then
    show_help
fi

for key in "$@"; do
    case $key in
        install)
            shift
            create_lxc_container
            break;
        ;;
        update)
            update_lxc_container
            shift
            break;
        ;;
        remove)
            shift
            remove_lxc_container
            break;
        ;;
        *)
            show_help
            exit 0
        ;;
    esac
done



