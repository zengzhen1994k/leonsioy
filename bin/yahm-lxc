#!/bin/bash
#
# Leonid Kogan <leon@leonsio.com>
# Yet Another Homematic Management 
#
# LXC management script, create new lxc container from CCU2 image 
#

# Stop on Errors
set -e

# Hilfe Output
show_help ()
{
cat << EOF
YAHM LXC management script

Usage Example: 

./yahm-lxc [FLAG] COMMAND
./yahm-lxc  -n mycccu install

Flags:
-n        - LXC container name.
-f        - Force operation (no halt on errors).
-v        - Verbose output 
-d        - Path to custom CCU2 firmware file
-b        - Build number (=version) of the CCU2-FW

Commands:
install     - Create new lxc instance with actual ccu2 image.
update      - Updates lxc instance to the actual version.
remove      - Removes lxc instance.
EOF
exit 1
}

DATA_FILE=""
BUILD=""
PATCH_FILE=""
PARAMETER="fvn:d:b:p:"

# Include laden
source /opt/YAHM/share/include.sh

if [ "$DATA_FILE" != "" ] && [ "$BUILD" == "" ]
then
    die "Please specify firmware file version number with -b flag (e.g. -b 2.17.16)"
fi

remove_lxc_container()
{
    if [ `check_yahm_installed` -eq 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: No container installed"
    fi

    if [ `check_yahm_name $LXCNAME` -eq 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: Can not find $LXCNAME container"
    fi

    if [ $IS_FORCE -eq 1 ]
    then
        info "Entering force mode"
    fi

    installed_version=`get_yahm_version ${LXCNAME}`

    info "Deleting installed YAHM container: ${LXCNAME} version: ${installed_version} To cancel this operation type CTRL+C you have 5 seconds..."
    countdown
    info "... too late ;)"

    progress "Stopping LXC container"
    lxc-stop $QUIET -k -n $LXCNAME || info "Container can not be found or is not running"

    progress "Deleting LXC container"
    rm -rf ${LXC_ROOT}

    progress "Clean up"
    rm -rf ${YAHM_LIB}/*
}

create_lxc_container()
{
    if [ `check_yahm_installed` -eq 1 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: YAHM instance is already installed"
    fi

    if [ $IS_FORCE -eq 1 ] ; then
        progress "ATTENTION: FORCE-Switch is used, actual instance will be overwritten"
    fi

    if [ "${BUILD}" == "" ] 
    then
        CCU2Version=`get_ccu2_actual_version`
    else
        CCU2Version=$BUILD
    fi

    # Compatibility Check
    if [ `yahm_compatibility $CCU2Version` -eq 1 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: We dont have any patches for this version, please call 'yahm-ctl update' and try again"
    fi

    info "Creating new lxc container name: $LXCNAME, version $CCU2Version"
    # Verzeichnis anlegen
    mkdir -p $LXC_ROOT
    mkdir -p $YAHM_TMP

    if [ "$DATA_FILE" = "" ]
    then
        download_ccu2_fw $CCU2Version
    else
        if [ ! -f $DATA_FILE ]
        then
            die "ERROR: Restore file can not be found, please specify it with -d flag"
        fi

        EQ3_FW=$DATA_FILE
    fi
    
    # 100kb sind mehr als jede HTML5 Fehlerseite, aber kleiner als CCU2 FW
    if [ $(stat -c%s "${EQ3_FW}") -le 100000 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: Firmware file size is to small, please take a look on ${EQ3_FW} file"  
    fi

    progress "Extracting firmware"
    tar $VERBOSE -xzf $EQ3_FW -C $YAHM_TMP

    if [ $? -eq 1 ]
    then
        die "Something is wrong with downloaded archive, exit" # SRC Ordner fehlt
    fi

    progress "Extract ubi image"
    $YAHM_DIR/share/tools/ubi_reader/ubi_extract_files.py $QUIET -k -o $LXC_ROOT "${YAHM_TMP}/rootfs.ubi"

    # most lxc commands use rootfs folder and not the config option
    ln -s $LXC_ROOT_FS $LXC_ROOT/rootfs

    if [ "$DATA_FILE" != "" ]
    then
        info "Manually CCU2 image was selected, trying to detect installed version"
        CCU2Version=`get_yahm_version ${LXCNAME}`
        
        if [ ! -f ${YAHM_DIR}/share/firmware/patches/${CCU2Version}.patch ] && [ $IS_FORCE -ne 1 ]
        then
            die "ERROR: Detected Version: ${CCU2Version}, can not find patch file for this version use -f for patching with version ${$LastCCU2Version}"
        else
            CCU2Version=$LastCCU2Version
        fi
    fi

    # try last known configuration
    if [ `yahm_compatibility $CCU2Version` -eq 1 ] && [ $IS_FORCE -eq 1 ]
    then
        info "INFO: No patches for version ${CCU2Version} found, trying to use old patches from ${LastCCU2Version}"
        CCU2Version=$LastCCU2Version
    fi

    if [ $(ver ${CCU2Version}) -ge $(ver "2.17.15") ]
    then
        progress "Cleanup CCU2 source"
        cd $LXC_ROOT_FS
        find . -iname '*.ftl' | xargs dos2unix $QUIET
        find . -iname '*.cgi' | xargs dos2unix $QUIET
    fi

    progress "Applying patch"
    cd $LXC_ROOT_FS
    patch --no-backup-if-mismatch $QUIET -l --input "${YAHM_DIR}/share/firmware/patches/${CCU2Version}.patch" -p1

    progress "Applying scripts"
    cd $LXC_ROOT_FS
    sh "${YAHM_DIR}/share/firmware/scripts/${CCU2Version}.sh"

    progress "Creating SD card"
    mkdir -p ${YAHM_LIB}/SDcard/${LXCNAME}/sd-mmcblk0
    touch ${YAHM_LIB}/SDcard/${LXCNAME}/sd-mmcblk0/.initialised

    # clean up download sources
    progress "Clean Up"
    rm -rf $YAHM_TMP

    # create lxc config file
    create_lxc_config

    if [ "$ARCH" = "X86" ]
    then
        info "Found x86 CPU architecture, need to install QEMU"
        cp /usr/bin/qemu-arm-static ${LXC_ROOT_FS}/usr/bin/
        echo "lxc.arch = armhf" >> ${LXC_ROOT}/config
    fi

    CCU2current=`get_yahm_version ${LXCNAME}`
    info "Container version ${CCU2current} is created, please use 'yahm-ctl -n ${LXCNAME} start' to start and 'yahm-ctl -n ${LXCNAME} join' for console access"
    info "For network configuration see yahm-network script"

    echo $LXCNAME > ${YAHM_LIB}/container_name
    touch ${YAHM_LIB}/is_installed
}

create_lxc_config()
{
        # lxc config file
        progress "Creating lxc config file"
        cat > "${LXC_ROOT}/config" <<EOF
lxc.mount.entry = proc proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry = sysfs sys sysfs rw  0 0
lxc.mount.entry = varfs var tmpfs defaults,size=196M 0 0
lxc.mount.entry = devpts dev/pts devpts defaults,newinstance 0 0
lxc.mount.entry = /var/lib/yahm/SDcard/${LXCNAME}/sd-mmcblk0  media/sd-mmcblk0/ none defaults,bind 0 0

lxc.utsname = ${LXCNAME}
lxc.rootfs = ${LXC_ROOT_FS}

# autostart disable-> lxc.start.auto=0
lxc.start.auto = 1

lxc.tty = 1
lxc.pts = 1

# cgroups
lxc.cgroup.devices.allow = a

# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm

# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm

# hm-mod-rpi
lxc.cgroup.devices.allow = c 204:64 rwm

# hmip-rf
lxc.cgroup.devices.allow = c 241:* rwm
lxc.cgroup.devices.allow = c 242:* rwm
lxc.cgroup.devices.allow = c 243:* rwm
lxc.cgroup.devices.allow = c 244:* rwm
lxc.cgroup.devices.allow = c 245:* rwm
lxc.cgroup.devices.allow = c 246:* rwm
lxc.cgroup.devices.allow = c 247:* rwm

# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm

# /dev/pts/* - pts namespaces are "coming soon"
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
lxc.cgroup.devices.allow = c 10:200 rwm

# includes
lxc.include = ${LXC_ROOT}/config.network

EOF
    if [ "$CODENAME" = "stretch" ] ;
    then
        echo "lxc.autodev = 0" >> ${LXC_ROOT}/config
    fi

    # blank config file
    touch ${LXC_ROOT}/config.network
}

update_lxc_container()
{

    if [ `check_yahm_installed` -eq 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: YAHM is not installed"
    fi

    if [ `check_yahm_name $LXCNAME` -eq 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: Can not find $LXCNAME container"
    fi

    if [ $(lxc-info -n ${LXCNAME}|grep RUNNING |wc -l) -eq 0 ]
    then
        die "${LXCNAME} container is not running (needed for data backup)."
    fi

    if [ "${BUILD}" == "" ]
    then
        CCU2Version=`get_ccu2_actual_version`
    else
        CCU2Version=$BUILD
    fi

    installed_version=`get_yahm_version ${LXCNAME}` 
    info "\nInstalled version: $installed_version"
    info "Available version: $CCU2Version\n"

    if [ $(ver $installed_version) -ge $(ver $CCU2Version) ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: Installed version $installed_version is greater than or equal to available version $CCU2Version"
    fi

    # Compatibility Check
    if [ `yahm_compatibility $CCU2Version` -eq 1 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: Can not find any patches for ${CCU2Version}, please call 'yahm-ctl update' and try again"
    fi

    [ $IS_FORCE -eq 1 ] && force_switch="-f" || force_switch=""

    progress "Trying to create a config-backup from installed version ${installed_version}, calling: 'yahm-backup data_backup' script"
    if [ $IS_DEBUG -eq 1 ] ; then
        info "Calling: /opt/YAHM/bin/yahm-backup ${VERBOSE} ${force_switch} -n ${LXCNAME} data_backup"
    fi
    /opt/YAHM/bin/yahm-backup ${VERBOSE} ${force_switch} -n ${LXCNAME} data_backup

    rm -rf ${YAHM_TMP}_update/${LXCNAME}/
    mkdir -p ${YAHM_TMP}_update/${LXCNAME}/
    mv ${YAHM_TMP}/*.sbk ${YAHM_TMP}_update/${LXCNAME}/

    progress "Backup old LXC config"
    cp ${LXC_ROOT}/conf* ${YAHM_TMP}_update/${LXCNAME}/
    progress "Backup installed modules"
    cp -rf ${LXC_ROOT}/.modules  ${YAHM_TMP}_update/${LXCNAME}/
    
    data_backup_file=$(ls ${YAHM_TMP}_update/${LXCNAME}/*.sbk)
    info "INFO: Config backup file location: ${data_backup_file}"

    progress "Creating full backup from installed version ${installed_version}, calling: 'yahm-backup full_backup' script"
    if [ $IS_DEBUG -eq 1 ] ; then
        info "Calling: /opt/YAHM/bin/yahm-backup ${VERBOSE} ${force_switch} -n ${LXCNAME} full_backup"
    fi
    /opt/YAHM/bin/yahm-backup ${VERBOSE} ${force_switch} -n ${LXCNAME} full_backup

    mv ${YAHM_TMP}/yahm_backup-${installed_version}.tgz ${YAHM_TMP}_update/${LXCNAME}/yahm_backup-${installed_version}_$(date +%Y%m%d).tgz
    full_backup_file=$(ls ${YAHM_TMP}_update/${LXCNAME}/yahm_backup-*.tgz)
    info "INFO: Full backup file location: ${full_backup_file}"

    progress "Delete old YAHM Container version: $installed_version"
    if [ $IS_DEBUG -eq 1 ] ; then
        info "Calling: remove_lxc_container"
    fi
    remove_lxc_container

    progress "Create new YAHM Container version: $CCU2Version"
    if [ $IS_DEBUG -eq 1 ] ; then
        info "Calling: create_lxc_container"
    fi
    create_lxc_container

    progress "Restoring old LXC config"
    cp ${YAHM_TMP}_update/${LXCNAME}/conf* ${LXC_ROOT}/

    progress "Trying to restore old CCU2 backup, calling 'yahm-backup data_restore'"
    if [ $IS_DEBUG -eq 1 ] ; then
        info "Calling: yahm-backup ${VERBOSE} ${force_switch} -n ${LXCNAME} -d ${data_backup_file} data_restore"
    fi
    /opt/YAHM/bin/yahm-backup ${VERBOSE} ${force_switch} -n ${LXCNAME} -d ${data_backup_file} data_restore

    if [ $IS_DEBUG -eq 1 ] ; then
        info "Calling: yahm-ctl -n ${LXCNAME} start"
    fi
    yahm-ctl -n ${LXCNAME} start

    progress "Restoring old installed modules"
    files=`ls ${YAHM_TMP}_update/${LXCNAME}/.modules`

    for file in $files
    do
        info "Restoring ${file} Module"
        if [ $IS_DEBUG -eq 1 ] ; then
            info "Calling: /opt/YAHM/bin/yahm-module -n ${LXCNAME} ${VERBOSE} -f -m $file enable"
        fi
        /opt/YAHM/bin/yahm-module -n ${LXCNAME} ${VERBOSE} -f -m $file enable
    done

    #rm -rf ${YAHM_TMP}_update/
    CCU2current=`get_yahm_version ${LXCNAME}`
    info "STATUS: Update was successfully new version is: ${CCU2current}"
    info "STATUS: Old config backup file: ${data_backup_file}"
    info "STATUS: Old full lxc backup file: ${full_backup_file}"
}

if [[ $# != 1 ]]; then
    show_help
fi

for key in "$@"; do
    case $key in
        install)
            shift
            create_lxc_container
            break;
        ;;
        update)
            update_lxc_container
            shift
            break;
        ;;
        remove)
            shift
            remove_lxc_container
            break;
        ;;
        *)
            show_help
            exit 0
        ;;
    esac
done
