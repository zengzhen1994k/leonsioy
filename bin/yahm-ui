#!/bin/bash
#
# Thomas Kluge <th.kluge@me.com>
# Yet Another Homematic Management 
#
# Graphical Interface for yahm command tools
#

set -e

#START: Hilfe Output falls yahm-ui mit irgend einem Flag ausgeführt wird (-h /--help)
show_help ()
{
cat << EOF
YAHM Management

Ausgabe hilfe Seite

Usage Example:

./yahm-ui [FLAG] COMMAND
./yahm-ui -f

Flags:
-f          - Force operation (no halt on errors).
-v          - Verbose output/Version?

Commands:
ggf. funktionen falls vorhanden

EOF
exit 1
}
PARAMETER="vf"
#END

source /opt/YAHM/share/include.sh

ASK_TO_RESTART=0
INFO_IP=""
INFO_STATE="unknow"

update_info() {
 if [ `check_container_installed` -eq 1 ]; then
	status=$(lxc-info -n ${LXCNAME})
 	state=$(echo "$status" | grep -oP "State:.*\b([A-Z]{1,})\b|\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b")
 	IFS=', ' read -r -a array <<< $state
 	INFO_STATE=${array[1]}
 	INFO_IP=${array[2]}
 fi
}

do_show_notfound() {
  whiptail --msgbox "Kein CCU Container ${LXCNAME} gefunden" 20 60 1
}

do_menu_ccu() {
while true; do
    FUNC=$(whiptail --title "YAHM Installation und Konfiguration (CCU Installation - ${LXCNAME})" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Zurück --ok-button Auswählen \
      "1 Neuinstallation" "CCU Container Neuinstallation" \
      "2 Update" "CCU Firmwareupdate" \
      "3 Deinstall" "CCU Container entfernen" \
      "-" "" \
      "4 Start" "CCU Container starten" \
      "5 Stop" "CCU Container beenden" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
      case "$FUNC" in
        1\ *) do_menu_ccu_install ;;
        2\ *) do_menu_ccu_update ;;
        3\ *) do_menu_ccu_remove ;;
        4\ *) do_menu_ccu_start ;;
        5\ *) do_menu_ccu_stop ;;

        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUNC" 20 60 1
    else
     return 0
    fi
 done

}

do_menu_ccu_start() {
    if [ `check_container_installed` -eq 1 ]
    then
     ${YAHM_DIR}/bin/yahm-ctl -n ${LXCNAME} start
     do_menu_status 
     else 
		do_show_notfound
    fi  
}

do_menu_ccu_stop() {
    if [ `check_container_installed` -eq 1 ]
    then
     ${YAHM_DIR}/bin/yahm-ctl -n ${LXCNAME} stop
     do_menu_status
	else 
		do_show_notfound
   fi  
}


do_menu_ccu_install() {
 inst_yahm=0
 inst_network=0
 inst_hmip=0
 inst_pcb=0
 
# Check existing Installation 
   
   if [ `check_container_installed` -eq 1 ]
    then
		whiptail --yesno "Es existiert bereits eine CCU Installation ${LXCNAME} . Soll diese gelöscht werden ?" 20 60 2
		    if [ $? -eq 1 ]; then # no
       		return 0
	    fi
    	# remove old stuff
    	${YAHM_DIR}/bin/yahm-lxc -n ${LXCNAME} -f remove
    fi   
  
    whiptail --title "YAHM Installation und Konfiguration (Installation - ${LXCNAME})" --checklist  --separate-output \
		    "Auszuführende Schritte ..." 20 78 8 \
  			"YAHM" "CCU Container"  ON \
  			"Network" "Netzwerkbridge einrichten" ON \
  			"HMIP" "HM-IP abschalten"  ON \
  			"PCB" "HM-MOD-RPI-PBC aktivieren" ON 2>results
  			

    while read choice
do
	case $choice in
		YAHM) inst_yahm=1;;
		Network) inst_network=1;;
		HMIP) inst_hmip=1;;
		PCB) inst_pcb=1;;
	esac

done < results

if [ $inst_yahm -eq 1 ]; then
 ${YAHM_DIR}/bin/yahm-lxc -n ${LXCNAME} install
fi

if [ $inst_network -eq 1 ]; then
 do_menu_network_createattachbridge
fi

if [ $inst_hmip -eq 1 ]; then
 #start container and wayit abour 30 seconds
 lxc-start -n ${LXCNAME} -d
 progress "\twait about 30 seconds until ccu is full launched"
 sleep 30
 ${YAHM_DIR}/bin/yahm-module -f -m homematic-ip -n ${LXCNAME} disable
fi

if [ $inst_pcb -eq 1 ]; then
 ${YAHM_DIR}/bin/yahm-module -m hm-mod-rpi-pcb -n ${LXCNAME} enable
fi

    
  return 0
}

do_menu_ccu_update() {
 
  if [ `check_container_installed` -eq 1 ]; then

   if (whiptail --yesno "Hast Du ein Backup Deiner CCU gemacht ?" 20 60 2) then
       ${YAHM_DIR}/bin/yahm-lxc -n ${LXCNAME} update 
   fi
  
  else 
	do_show_notfound
  fi    
  
  return 0
}

do_menu_ccu_remove() {
   if [ `check_container_installed` -eq 1 ]
    then
		whiptail --yesno "Bist Du sicher das Du den CCU Container ${LXCNAME} entfernen möchtest. Alle Daten gehen verloren ?" 20 60 2
		    if [ $? -eq 1 ]; then # no
       		return 0
	    fi
    	# stop ccu - remove stuff - remove network settings

    	lxc-stop -k -n ${LXCNAME}

    	${YAHM_DIR}/bin/yahm-lxc -n ${LXCNAME} -f remove
    	
    	if [ `check_bridge_name $BRIDGE` -eq 1 ]; then
    		${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} dettach_bridge
	    	${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} -w delete_bridge
		fi
	else 
		do_show_notfound
  fi   

}


do_menu_backup() {

while true; do
    FUNC=$(whiptail --title "YAHM Installation und Konfiguration (Datensicherung - ${LXCNAME})" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Zurück --ok-button Auswählen \
      "1 Backup YAHM" "YAHM Container sichern" \
      "2 Restore YAHM" "YAHM Container zurückspielen" \
      "3 Backup CCU" "CCU Backup anlegen" \
      "4 Restore CCU" "CCU Backup einspielen" \
      "5 Cron Backup" "Tägliches Backup der CCU" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
      case "$FUNC" in
        1\ *) do_menu_backup_action 0 ;;
        2\ *) do_menu_backup_action 1 ;;
        3\ *) do_menu_backup_action 2 ;;
        4\ *) do_menu_backup_action 3 ;;
        5\ *) do_menu_backup_acron ;;
        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUNC" 20 60 1
    else
     return 0
    fi
  done

}

do_menu_backup_acron() {
 command="${YAHM_DIR}/share/tools/cron_backup.sh"
 job="0 0 * * * $command"
 if [ $(crontab -u root -l | grep $command|wc -l) -eq 1 ]
 then
   if (whiptail --yesno --title "YAHM Backup" "Tägliches Backup ist eingeschalten. Möchtest Du es ausschalten ?" 20 60 --defaultno) then
     # remove backup script
     rm $command >/dev/null
     # remove cron job
     crontab -u root -l | grep -v $command  | crontab -u root -
     whiptail --msgbox "Der Cron Job wurde entfernt." --title "Meeehhh !" 20 60 1
     return 0
   fi
 else
   if (whiptail --yesno --title "YAHM Backup" "Tägliches Backup ist ausgeschalten. Möchtest Du es einschalten ?" 20 60 --defaultno) then
	#ask for path
	backup_path=$(whiptail --inputbox "In welchem Pfad soll das Backup abgelegt werden" 20 60 "$HOME" 3>&1 1>&2 2>&3)
	if [ -w $backup_path ]
	then
	cat > "$command" <<EOF
#!/bin/bash
#autogenerated backup command
#
yahm-backup -n ${LXCNAME} -d $backup_path data_backup
EOF

	chmod +x $command
	crontab -u root -l > /tmp/mycron
	echo "$job" >>/tmp/mycron
	crontab /tmp/mycron
	rm /tmp/mycron
    whiptail --msgbox "Cron Job (tgl. 0 Uhr) wurde eingerichtet." --title "Yes !" 20 60 1

	else
	  whiptail --msgbox "${backup_path} nicht vorhanden oder nicht beschreibbar." --title "Oh nooo" 20 60 1
    fi
   fi
 fi
}


do_menu_backup_action() {
  
  case $1 in
        0)
          backupfile="/tmp/yahm_backup"
		  ${YAHM_DIR}/bin/yahm-backup -n ${LXCNAME} -d /home/pi full_backup
		  whiptail --msgbox "Das YAHM Backup wurde unter ${backupfile} angelegt" 20 60 1
  		  ASK_TO_RESTART=1
  		  break;
  		  ;;
        1)
          backupfile="/tmp/yahm_backup"
		  ${YAHM_DIR}/bin/yahm-backup -n ${LXCNAME} -d ${backupfile} full_backup
  		  ASK_TO_RESTART=1
  		  break;
  		  ;;
        2)
          backupfile="/tmp/homematic_ccu_backup.sbk"
          info "Backup " 
		  ${YAHM_DIR}/bin/yahm-backup -n ${LXCNAME} -d ${backupfile} data_backup
		  whiptail --msgbox "Das CCU Backup wurde unter ${backupfile} angelegt" 20 60 1
  		  break;
  		  ;;
        3)
		  ${YAHM_DIR}/bin/yahm-backup -n ${LXCNAME} -d /home/pi data_restore
  		  ASK_TO_RESTART=1
  		  break;
  		  ;;
  esac
}


do_menu_install_update() {
  ${YAHM_DIR}/bin/yahm-ctl update
}

calc_wt_size() {
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi

  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi

  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

do_menu_module() {

   files=`ls ${YAHM_DIR}/share/modules/`
   modules=()
    for file in $files
    do
        description=`cat ${YAHM_DIR}/share/modules/${file}  | grep description -m1 | cut -d'"' -f2` 
        modules+=("$file" "$description")
    done 


while true; do
    FUNC=$(whiptail --title "YAHM Installation und Konfiguration (Module - ${LXCNAME})" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Zurück --ok-button Auswählen "${modules[@]}"\
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
       do_menu_show_module_state $FUNC
    else
     return 0
    fi
  done

}

do_menu_show_module_state() {
  
  if [ -e ${LXC_ROOT_MODULES}/$1 ] ; then
    if (whiptail --yesno --title "YAHM" "$1 ist aktuell installiert. Möchtest Du es entfernen ? " 20 60 --defaultno) then
      do_menu_module_action $1 disable
    fi
  else
    if (whiptail --yesno --title "YAHM" "$1 ist aktuell nicht installiert. Möchtest Du es installieren ? " 20 60 --defaultno) then
	  do_menu_module_action $1 enable
    fi
  fi
}

do_menu_module_action() {
  ${YAHM_DIR}/bin/yahm-module -n ${LXCNAME} -f -m $1 $2
}

do_menu_network() {

while true; do
    FUNC=$(whiptail --title "YAHM Installation und Konfiguration (Netzwerk)" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Zurück --ok-button Auswählen \
      "1 Create" "Bridge erzeugen" \
      "2 Delete" "Bridge löschen" \
      "3 Attach" "Bridge zu LXC hinzufügen" \
      "4 Dettach" "Bridge von LXC entfernen" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
      case "$FUNC" in
        1\ *) do_menu_network_createbridge ;;
        2\ *) do_menu_network_deletebridge ;;
        3\ *) do_menu_network_attachbridge ;;
        4\ *) do_menu_network_dettachbridge ;;

        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUNC" 20 60 1
    else
     return 0
    fi
  done
  
}

do_menu_network_createbridge() {
  
# check existing bridge
   if [ `check_bridge_name $BRIDGE` -eq 0 ]; then
	   ${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} -w create_bridge
   else
     whiptail --msgbox "Es existiert schon eine Bridge mit dem Namen $BRIDGE" 20 60 2
   fi
}

do_menu_network_deletebridge() {

   if [ `check_bridge_name $BRIDGE` -eq 1 ]; then
     ${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} -w delete_bridge
   else
     whiptail --msgbox "Es existiert keine Bridge mit dem Namen $BRIDGE" 20 60 2
   fi
}

do_menu_network_attachbridge() {
   if [ `check_bridge_name $BRIDGE` -eq 1 ]; then
 	${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} attach_bridge
 	ASK_TO_RESTART=1
   else
     whiptail --msgbox "Es existiert keine Bridge mit dem Namen $BRIDGE" 20 60 2
   fi
}

do_menu_network_dettachbridge() {
	${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} dettach_bridge
	ASK_TO_RESTART=1
}


do_menu_network_createattachbridge() {
    ${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} -w create_bridge
    ${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} attach_bridge
    ASK_TO_RESTART=1
}

do_finish_menu() {
   
   if [ $ASK_TO_RESTART -eq 1 ]; then
    if (whiptail --yesno "Soll die CCU neu gestartet werden" 20 60 2) then

      # stop if container is running
      if [ $(lxc-info -n ${LXCNAME}|grep STOPPED|wc -l) -eq 0 ]; then
            lxc-stop $QUIET -k -n ${LXCNAME}
      fi
      
      progress "Starting ${LXCNAME} LXC container"
      lxc-start -n ${LXCNAME} -d
    fi
  fi

  exit 0
  
}


do_menu_diag() {

while true; do
    FUNC=$(whiptail --title "YAHM Installation und Konfiguration (Diagnose - ${LXCNAME})" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Zurück --ok-button Auswählen \
      "1 CCU Interfaces" "Interface Datei der CCU anzeigen" \
      "2 CCU RFD" "rfd.conf Datei der CCU anzeigen" \
      "3 CCU Tweak" "WebGUI Diagnose aktivieren"\
      "4 Network" "Raspberry Network" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
      case "$FUNC" in
        1\ *) do_menu_diag_showFile "${LXC_ROOT_FS}/usr/local/etc/config/InterfacesList.xml" "Interfaces.xml" ;;
        2\ *) do_menu_diag_showFile "${LXC_ROOT_FS}/usr/local/etc/config/rfd.conf" "rfd.conf" ;;
        4\ *) do_menu_diag_showFile "/etc/network/interfaces" "Interfaces" ;;
        3\ *) do_menu_ccu_tweak ;; 
        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUNC" 20 60 1
    else
     return 0
    fi
  done


}

do_menu_ccu_tweak() {
  if [ `check_container_installed` -eq 1 ]; then
    echo "CP_DEVCONFIG=1" > ${LXC_ROOT_FS}/usr/local/etc/config/tweaks
	whiptail --msgbox "Diagnose wurde aktiviert. Siehe WebGUI Systemsteuerung" 20 60 2
  else 
	whiptail --msgbox " Keinen YAHM Container ${LXCNAME} gefunden." 20 60 2
  fi

}

do_menu_container() {
  
  LXCNAME=$(whiptail --inputbox "Aktuellen Container " 8 78 "${LXCNAME}" --title "YAHM Container ändern" 3>&1 1>&2 2>&3)
  LXC_ROOT=/var/lib/lxc/$LXCNAME
  LXC_ROOT_FS=/var/lib/lxc/$LXCNAME/root
  LXC_ROOT_MODULES=/var/lib/lxc/$LXCNAME/.modules
}


do_menu_diag_showFile() {
  value=$(<$1)
  whiptail --msgbox --backtitle $2 "${value}" --scrolltext 30 $WT_WIDTH 2
}

do_menu_status() {
  if [ `check_container_installed` -eq 1 ]; then
	update_info
	whiptail --msgbox " CCU Container ..: ${LXCNAME}\n CCU IP Adresse .: ${INFO_IP}\n CCU Status .....: ${INFO_STATE}" 20 60 2
  else 
	whiptail --msgbox " Keinen YAHM Container ${LXCNAME} gefunden." 20 60 2
  fi
}

calc_wt_size
    
    #do it only once a day
    sema="/tmp/yahm_updatecheck"
    
    if [ -f "$sema" ]
    then
		ts=$(stat -c %y ${sema})
		lastrun=$(echo "$ts" | grep -oP "(0[1-9]|[12]\d|3[01]) ")
    
    	if [ $lastrun -ne $(date +%d) ]
    	then
       	   progress "Checking for updates"
    	   touch ${sema}
	       if [ `check_git_update` -eq 1 ]; then
             if (whiptail --yesno --title "Horray !!" "Es gibt ein Update für YAHM.\nMöchtest Du es installieren ?" 20 60 2) then
	          do_menu_install_update
	         fi
	       fi
        fi
     else
       touch ${sema}
     fi    

while true; do


    FUNC=$(whiptail --title "YAHM Installation und Konfiguration" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --ok-button Auswählen --nocancel \
      "1 CCU " "CCU Installation / Update / Deinstallation" \
      "2 Netzwerk" "Netzwerkeinstellungen" \
      "3 Backup" "Datensicherung erstellen oder Rücksichern" \
      "4 Module" "Module aktivieren oder deaktivieren" \
      "5 Status" "YAHM Status anzeigen" \
      "6 Name" "Container wechseln aktuell:${LXCNAME}" \
      "7 Diag" "Diagnose" \
      "8 Beenden" "YAHM-UI Beenden" \
      3>&1 1>&2 2>&3)
    RET=$?

    if [ $RET -eq 1 ]; then
     
      do_finish_menu
      
    elif [ $RET -eq 0 ]; then
      case "$FUNC" in
        1\ *) do_menu_ccu ;;
        2\ *) do_menu_network ;;
        3\ *) do_menu_backup ;;
        4\ *) do_menu_module ;;
        5\ *) do_menu_status ;;
        6\ *) do_menu_container ;;
        7\ *) do_menu_diag ;;
        8\ *) do_finish_menu ;;

        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUNC" 20 60 1
    else
     exit 1
    fi
  done
