#!/bin/bash
#
# Thomas Kluge <th.kluge@me.com>
# Yet Another Homematic Management 
#
# Graphical Interface for yahm command tools
#

set -e

#START: Hilfe Output falls yahm-ui mit irgend einem Flag ausgeführt wird (-h /--help)
show_help ()
{
cat << EOF
YAHM Management

Ausgabe Hilfe Seite

Usage Example:

./yahm-ui [FLAG] COMMAND
./yahm-ui -f

Flags:
-f          - Force operation (no halt on errors).
-v          - Verbose output/Version?

Commands:
ggf. funktionen falls vorhanden

EOF
exit 1
}
PARAMETER="vfn:"
#END

source /opt/YAHM/share/include.sh

ASK_TO_RESTART=0
INFO_IP=""
INFO_STATE="unknow"

update_info() {
 if [ `check_container_installed` -eq 1 ]; then
	status=$(lxc-info -n ${LXCNAME})
 	state=$(echo "$status" | grep -oP "State:.*\b([A-Z]{1,})\b|\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b")
 	IFS=', ' read -r -a array <<< $state
 	INFO_STATE=${array[1]}
 	INFO_IP=${array[2]}
 fi
}

do_show_notfound() {
  whiptail --msgbox "Kein CCU Container ${LXCNAME} gefunden" 20 60 1
}

do_menu_ccu() {
while true; do
    FUNC=$(whiptail --title "YAHM Installation und Konfiguration (CCU Installation - ${LXCNAME})" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Zurück --ok-button Auswählen \
      "1 Neuinstallation" "CCU Container Neuinstallation mit Firmware $CCU2Version" \
      "2 Update" "CCU Firmwareupdate" \
      "3 Deinstall" "CCU Container entfernen" \
      "-" "" \
      "4 Start" "CCU Container starten" \
      "5 Stop" "CCU Container beenden" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
      case "$FUNC" in
        1\ *) do_menu_ccu_install ;;
        2\ *) do_menu_ccu_update ;;
        3\ *) do_menu_ccu_remove ;;
        4\ *) do_menu_ccu_start 1;;
        5\ *) do_menu_ccu_stop 1;;

        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUNC" 20 60 1
    else
     return 0
    fi
 done

}

do_menu_ccu_start() {
    if [ `check_container_installed` -eq 1 ]
    then
     ${YAHM_DIR}/bin/yahm-ctl -n ${LXCNAME} start
      if [ $1 -eq 1 ]
      then
       do_menu_status 
      fi
     else 
		do_show_notfound
    fi  
}

do_menu_ccu_stop() {
    if [ `check_container_installed` -eq 1 ]
    then
     ${YAHM_DIR}/bin/yahm-ctl -n ${LXCNAME} stop
     if [ $1 -eq 1 ]
     then
	     do_menu_status
	 fi
	else 
		do_show_notfound
   fi  
}


do_menu_ccu_install() {
 inst_yahm=0
 inst_network=0
 inst_hmip=0
 inst_pcb=0
 inst_cm=0
# Check existing Installation 
   
   if [ `check_container_installed` -eq 1 ]
    then
		whiptail --yesno "Es existiert bereits eine CCU Installation ${LXCNAME} . Soll diese gelöscht werden ?" 20 60 2
		ret=$?
		    if [ $ret -eq 1 ] || [ $ret -eq 255 ]; then # no
       		return 0
	    fi
    	# remove old stuff
    	${YAHM_DIR}/bin/yahm-lxc -n ${LXCNAME} -f remove
    fi   
  
    whiptail --title "YAHM Installation und Konfiguration (Installation - ${LXCNAME})" --checklist  --separate-output \
		    "Auszuführende Schritte ..." 20 78 8 \
  			"YAHM" "CCU Container"  ON \
  			"Network" "Netzwerkbridge einrichten" ON \
  			"HMIP" "HM-IP abschalten"  ON \
  			"PCB" "HM-MOD-RPI-PBC aktivieren" ON\
  			"Cloudmatic" "Cloudmatic Fernzugang vorbereiten" ON 2>results
  			

    while read choice
do
	case $choice in
		YAHM) inst_yahm=1;;
		Network) inst_network=1;;
		HMIP) inst_hmip=1;;
		PCB) inst_pcb=1;;
		Cloudmatic) inst_cm=1;;
	esac

done < results

reboot=""

if [ $inst_yahm -eq 1 ]; then
 ${YAHM_DIR}/bin/yahm-lxc -n ${LXCNAME} -b $CCU2Version install
fi

if [ $inst_network -eq 1 ]; then
  do_menu_network_createbridge
  sleep 2
  do_menu_network_attachbridge
fi

if [ $inst_hmip -eq 1 ]; then
 #start container and wait for Rega
 lxc-start -n ${LXCNAME} -d
 progress "waiting for RegaHSS to launch ..."
 
 until pids=$(pidof ReGaHss)
  do   
   echo -n "."
   sleep 1
  done
  
 ${YAHM_DIR}/bin/yahm-module -f -m homematic-ip -n ${LXCNAME} disable
fi

if [ $inst_cm -eq 1 ]; then
 progress "installing Cloudmatic Module"
 ${YAHM_DIR}/bin/yahm-module -f -m meinhomematic -n ${LXCNAME} enable
fi


if [ $inst_pcb -eq 1 ]; then
 ${YAHM_DIR}/bin/yahm-module -m hm-mod-rpi-pcb -n ${LXCNAME} enable
 sleep 1
 if [ -f /run/nologin ]
  then
   reboot="Das System startet gleich neu ...."
   clear
 fi
fi
  
  whiptail --msgbox "Alle Installationstasks erledigt.. ${reboot}" --title "Yeah, man !" 20 60 1  3>&1 1>&2 2>&3
  
}

do_menu_ccu_update() {
 
  if [ `check_container_installed` -eq 1 ]; then

   whiptail --yesno "Hast Du ein Backup Deiner CCU gemacht ?" 20 60 2
   if [ $? -eq 0 ]; then
       ${YAHM_DIR}/bin/yahm-lxc -n ${LXCNAME} update 
   fi
  
  else 
	do_show_notfound
  fi    
  
  return 0
}

do_menu_ccu_remove() {
   if [ `check_container_installed` -eq 1 ]
    then
		whiptail --yesno "Bist Du sicher das Du den CCU Container ${LXCNAME} entfernen möchtest. Alle Daten gehen verloren ?" 20 60 2
		    ret=$?
		    if [ $ret -eq 1 ] || [ $ret -eq 255 ]; then # no
       		return 0
	    fi
    	# stop ccu - remove stuff - remove network settings

    	lxc-stop -k -n ${LXCNAME}

    	#save it for later
		removepcb=0
		if [ -e ${LXC_ROOT_MODULES}/hm-mod-rpi-pcb ]
		then
		 removepcb=1
		fi

    	${YAHM_DIR}/bin/yahm-lxc -n ${LXCNAME} -f remove
    	
    	if [ `check_bridge_name $BRIDGE` -eq 1 ]; then
    		${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} dettach_bridge
	    	${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} -w delete_bridge
		fi
		#check for mod-pcb
		if [ $removepcb -eq 1 ]
		then
			${YAHM_DIR}/bin/yahm-module -m hm-mod-rpi-pcb -n ${LXCNAME} -f disable
		fi
		
		sleep 1
		
		if [ -f /run/nologin ]
		then
		   reboot="Das System startet gleich neu ...."
   		   clear
 		fi

  
  		whiptail --msgbox "Alle Löschtasks erledigt.. ${reboot}" --title "Yeah, man !" 20 60 1  3>&1 1>&2 2>&3

	else 
		do_show_notfound
  fi   

}


do_menu_backup() {

while true; do
    FUNC=$(whiptail --title "YAHM Installation und Konfiguration (Datensicherung - ${LXCNAME})" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Zurück --ok-button Auswählen \
      "1 Backup YAHM" "YAHM Container sichern" \
      "2 Restore YAHM" "YAHM Container zurückspielen" \
      "3 Backup CCU" "CCU Backup anlegen" \
      "4 Restore CCU" "CCU Backup einspielen" \
      "5 Cron Backup" "Tägliches Backup der CCU" \
      "6 Backup myself" "Gesamtes Hostsystem sichern" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
      case "$FUNC" in
        1\ *) do_menu_backup_action 0 ;;
        2\ *) do_menu_backup_action 1 ;;
        3\ *) do_menu_backup_action 2 ;;
        4\ *) do_menu_backup_action 3 ;;
        5\ *) do_menu_backup_acron ;;
        6\ *) do_menu_backup_myself;;
        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUNC" 20 60 1
    else
     return 0
    fi
  done

}

do_menu_backup_acron() {
 command="${YAHM_DIR}/share/tools/cron_backup.sh"
 job="0 0 * * * $command"
 if [ $(crontab -u root -l | grep $command|wc -l) -eq 1 ]
 then
     
     whiptail --yesno --title "YAHM Backup" "Tägliches Backup ist eingeschalten. Möchtest Du es ausschalten ?" 20 60 --defaultno
     if [ $? -eq 0 ]; then
     	# remove backup script
    	 rm $command >/dev/null
    	 # remove cron job
    	 crontab -u root -l | grep -v $command  | crontab -u root -
    	 whiptail --msgbox "Der Cron Job wurde entfernt." --title "Meeehhh !" 20 60 1
     	return 0
	 fi   
 else
    
    whiptail --yesno --title "YAHM Backup" "Tägliches Backup ist ausgeschalten. Möchtest Du es einschalten ?" 20 60 --defaultno
    if [ $? -eq 0 ]; then 
	#ask for path
	backup_path=$(whiptail --inputbox "In welchem Pfad soll das Backup abgelegt werden" 20 60 "$HOME" 3>&1 1>&2 2>&3)
	if [ -n "$backup_path" ] && [ -w $backup_path ]
	then
	cat > "$command" <<EOF
#!/bin/bash
#autogenerated backup command
#
cd ${YAHM_DIR}
${YAHM_DIR}/bin/yahm-backup -n ${LXCNAME} -d $backup_path -f data_backup
EOF

	chmod +x $command
	crontab -u root -l > /tmp/mycron
	echo "$job" >>/tmp/mycron
	crontab /tmp/mycron
	rm /tmp/mycron
    (whiptail --msgbox "Cron Job (tgl. 0 Uhr) wurde eingerichtet." --title "Yes !" 20 60 1  3>&1 1>&2 2>&3)

	else
	  (whiptail --msgbox "${backup_path} nicht vorhanden oder nicht beschreibbar." --title "Oh nooo" 20 60 1  3>&1 1>&2 2>&3)
    fi
   fi
 fi
}

ask_for_backup_path() {
    backup_path=$(whiptail --inputbox "In welchem Pfad soll das Backup abgelegt werden" 20 60 $1  3>&1 1>&2 2>&3)
	if [ -n "$backup_path" ] && [ -w $backup_path ]
	then
	  echo $backup_path
	else
	  (whiptail --msgbox "${backup_path} nicht vorhanden oder nicht beschreibbar." --title "Oh nooo" 20 60 1  3>&1 1>&2 2>&3)
	  echo "invalid"
    fi
}

ask_for_backup_file() {
    backup_file=$(whiptail --inputbox "Welche Backup Datei soll eingespielt werden ?" 20 60 "$1"  3>&1 1>&2 2>&3)
	if  [ -n $backup_file ] && [ -f $backup_file ]
	then
	  echo $backup_file
	else
	  (whiptail --msgbox "${backup_file} nicht vorhanden." --title "Oh nooo" 20 60 1  3>&1 1>&2 2>&3)
	  echo "invalid"
    fi
}


do_menu_backup_action() {
  
  case $1 in
        0)
          ${YAHM_DIR}/bin/yahm-backup -n ${LXCNAME} full_backup
		  whiptail --msgbox "Das CCU Backup wurde unter ${YAHM_TMP}/yahm_backup-${installed_version}.tgz angelegt" 20 60 1
  		  break;
  		  ;;
        1)
          backupfile=$(ask_for_backup_file "${YAHM_TMP}/yahm_backup-${installed_version}.tgz")
          if [ "$backupfile" == "invalid" ]
          then
	       break;
          else
		   ${YAHM_DIR}/bin/yahm-backup -n ${LXCNAME} -d ${backupfile} full_restore
  		   ASK_TO_RESTART=1
  		   break;
  		  fi
  		  ;;
        2)
          path=$(ask_for_backup_path $HOME)
          if [ "$path" == "invalid" ]
          then
	       break;
          else
	          backupfile="$path/homematic_ccu_backup.sbk"
          	  info "Backup " 
          	  ${YAHM_DIR}/bin/yahm-backup -n ${LXCNAME} -d ${backupfile} data_backup
			  whiptail --msgbox "Das CCU Backup wurde unter ${backupfile} angelegt" 20 60 1
  		  fi
  		  break;
  		  ;;
        3)
          backupfile=$(ask_for_backup_file "${YAHM_TMP}/homematic_ccu_backup.sbk")
          if [ "$backupfile" == "invalid" ]
          then
	       break;
          else
		   ${YAHM_DIR}/bin/yahm-backup -n ${LXCNAME} -d ${backupfile} data_restore
  		   ASK_TO_RESTART=1
  		   break;
  		  fi
  		  ;;
  esac
}

do_menu_backup_myself() {

   backuppath=$(ask_for_backup_path "/mnt")
   if [ "$backuppath" == "invalid" ]
   then
	break;
   else
    if [ $(mountpoint $backuppath|grep not|wc -l) -eq 1 ]
    then
     whiptail --msgbox "$backuppath darf kein lokaler Pfad sein. Entweder USB oder Netzwerklaufwerk." --title "Damn it ! " 20 60 1
     break
    else
     backupfile=$backuppath/yahm_host_backup.img
     
     sz=$(df -h|sed -n 2p|awk '{print $2}')
     
     (whiptail --yesno "Sicherung wird jetzt in $backuppath erzeugt. Bitte beachte, die Sicherung ist exakt so groß wie die SD Karte (${sz}) . Und es wird etwas dauern. (ca 2min / GB)" --title "Saving all the bits...." --no-button "Abbrechen" --yes-button "Backup erstellen" 20 60 2)
	 ret=$?    
     if [ $ret -eq 1 ] || [ $ret -eq 255 ]; then # no
       		return 0
	 fi
     
     (whiptail --yesno "Es wird dringend empfohlen den Container während des Backups anzuhalten, um die Integrität der Daten zu gewährleisten." --title "Drive safely !" --no-button "Nicht stoppen" --yes-button "Container stoppen" 20 60 2)
     stop=$?
     
     if [ $stop -eq 0 ]
     then 
		 do_menu_ccu_stop 0
	 fi
	 
     progress "Sichere ${sz}.. das dauert jetzt ein wenig (ca 2min / GB) ...."
     dd if=/dev/mmcblk0 of=$backupfile bs=8MB
     ret=$?
     
     if [ $stop -eq 0 ]
     then 
		 do_menu_ccu_start 0
     fi

	 if [ $ret gt 0 ]
	 then
	   (whiptail --msgbox "Fehler beim Sichern" --title "Oh noooooh !" 20 60 1)
     else 
	   (whiptail --msgbox "Hostsystem wurde in $backupfile gesichert." --title "You're save now !" 20 60 1)
	 fi
     
   fi
   fi
}

do_menu_install_update() {
  ${YAHM_DIR}/bin/yahm-ctl update
}

calc_wt_size() {
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi

  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi

  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

do_menu_module() {

## rebuild Module list every time
while true; do
   files=`ls ${YAHM_DIR}/share/modules/`
   modules=()
    for file in $files
    do
        description=`cat ${YAHM_DIR}/share/modules/${file}  | grep description -m1 | cut -d'"' -f2` 

        if [ -e ${LXC_ROOT_MODULES}/${file} ]
        then
		 description="[X] ${description}"
		else
		 description="[ ] ${description}"
		fi
		
        modules+=("$file" "$description")
    done 


    FUNC=$(whiptail --title "YAHM Installation und Konfiguration (Module - ${LXCNAME})" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Zurück --ok-button Auswählen "${modules[@]}"\
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
      
    if [ `check_container_installed` -eq 1 ]; then
       do_menu_show_module_state $FUNC
	else 
	  whiptail --msgbox " Keinen YAHM Container ${LXCNAME} gefunden." 20 60 2
	  return 0
    fi

      
    else
     return 0
    fi
  done

}

do_menu_show_module_state() {
  
  if [ -e ${LXC_ROOT_MODULES}/$1 ] ; then
    whiptail --yesno --title "YAHM" "$1 ist aktuell installiert. Möchtest Du es entfernen ? " 20 60 --defaultno
    if [ $? -eq 0 ]; then
      do_menu_module_action $1 disable
    fi
  else
    whiptail --yesno --title "YAHM" "$1 ist aktuell nicht installiert. Möchtest Du es installieren ? " 20 60 --defaultno
    if [ $? -eq 0 ]; then
	  do_menu_module_action $1 enable
    fi
  fi
  
  sleep 1

  if [ -f "/run/nologin" ]
  then
   reboot="Das System startet gleich neu ...."
   clear
  fi

  whiptail --msgbox "Alle Installationstasks erledigt. ${reboot}" --title "Yeah, man !" 20 60 1  3>&1 1>&2 2>&3
  return 0
}

do_menu_module_action() {
  ${YAHM_DIR}/bin/yahm-module -n ${LXCNAME} -f -m $1 $2
}

do_menu_network() {

while true; do
    FUNC=$(whiptail --title "YAHM Installation und Konfiguration (Netzwerk)" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Zurück --ok-button Auswählen \
      "1 Create" "Bridge $BRIDGE auf $INTERFACE erzeugen" \
      "2 Delete" "Bridge $BRIDGE von $INTERFACE löschen" \
      "3 Attach" "Bridge $BRIDGE zu LXC hinzufügen" \
      "4 Dettach" "Bridge $BRIDGE von LXC entfernen" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
      case "$FUNC" in
        1\ *) do_menu_network_createbridge ;;
        2\ *) do_menu_network_deletebridge ;;
        3\ *) do_menu_network_attachbridge ;;
        4\ *) do_menu_network_dettachbridge ;;

        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUNC" 20 60 1
    else
     return 0
    fi
  done
  
}


do_menu_network_createbridge() {
  
# check existing bridge
   if [ `check_bridge_name $BRIDGE` -eq 0 ]; then
	   ${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} -w -i $INTERFACE -b $BRIDGE create_bridge
   else
     whiptail --msgbox "Es existiert schon eine Bridge mit dem Namen $BRIDGE" 20 60 2
   fi
}

do_menu_network_deletebridge() {

   if [ `check_bridge_name $BRIDGE` -eq 1 ]; then
     ${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} -w -b $BRIDGE delete_bridge
   else
     whiptail --msgbox "Es existiert keine Bridge mit dem Namen $BRIDGE" 20 60 2
   fi
}

do_menu_network_attachbridge() {
   if [ `check_bridge_name $BRIDGE` -eq 1 ]; then
 	${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} -b $BRIDGE attach_bridge
 	ASK_TO_RESTART=1
   else
     whiptail --msgbox "Es existiert keine Bridge mit dem Namen $BRIDGE" 20 60 2
   fi
}

do_menu_network_dettachbridge() {
	${YAHM_DIR}/bin/yahm-network -n ${LXCNAME} -b $BRIDGE dettach_bridge
	ASK_TO_RESTART=1
}


do_finish_menu() {
   progress "Finishing"
   if [ $ASK_TO_RESTART -eq 1 ]; then
    whiptail --yesno "Soll die CCU neu gestartet werden" 20 60 2
	  if [ $? -eq 0 ]; then
      # stop if container is running
      if [ $(lxc-info -n ${LXCNAME}|grep STOPPED|wc -l) -eq 0 ]; then
            lxc-stop $QUIET -k -n ${LXCNAME}
      fi
      
      progress "Starting ${LXCNAME} LXC container"
      lxc-start -n ${LXCNAME} -d
    fi
  fi

  exit 0
  
}


do_menu_diag() {


while true; do
    FUNC=$(whiptail --title "YAHM Installation und Konfiguration (Diagnose - ${LXCNAME})" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Zurück --ok-button Auswählen \
      "1 CCU Interfaces" "Interface Datei der CCU anzeigen" \
      "2 CCU RFD" "rfd.conf Datei der CCU anzeigen" \
      "3 CCU Tweak" "WebGUI Diagnose aktivieren"\
      "4 Network" "Raspberry Network" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
      case "$FUNC" in
        1\ *) do_menu_diag_showFile "${LXC_ROOT_FS}/usr/local/etc/config/InterfacesList.xml" "Interfaces.xml" ;;
        2\ *) do_menu_diag_showFile "${LXC_ROOT_FS}/usr/local/etc/config/rfd.conf" "rfd.conf" ;;
        4\ *) do_menu_diag_showFile "/etc/network/interfaces" "Interfaces" ;;
        3\ *) do_menu_ccu_tweak ;; 
        *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUNC" 20 60 1
    else
     return 0
    fi
  done


}

do_menu_ccu_tweak() {
  if [ `check_container_installed` -eq 1 ]; then
    echo "CP_DEVCONFIG=1" > ${LXC_ROOT_FS}/usr/local/etc/config/tweaks
	whiptail --msgbox "Diagnose wurde aktiviert. Siehe WebGUI Systemsteuerung" 20 60 2
  else 
	whiptail --msgbox " Keinen YAHM Container ${LXCNAME} gefunden." 20 60 2
  fi

}

do_menu_expert() {
while true; do
    FUNC=$(whiptail --title "YAHM Experteneinstellungen" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Zurück --ok-button Auswählen \
      "1 Container" "Yahm Containername: ${LXCNAME}" \
      "2 Interface" "Host Interface: ${INTERFACE}" \
      "3 Bridge" "Bridge: ${BRIDGE}" \
      "4 Firmware" "CCU Firmware: ${CCU2Version}" \
      "5 GIT" "Branch: ${GIT_BRANCH}" \
      3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
      return 0
    elif [ $RET -eq 0 ]; then
      case "$FUNC" in
        1\ *) do_menu_expert_changeOption 1 "Ändert den Namen des YAHM Containers" ${LXCNAME};;
        2\ *) do_menu_expert_changeOption 2 "Ändert das Netzwerkinterface über welchen das Hostsystem angebunden ist" ${INTERFACE};;
        3\ *) do_menu_expert_changeOption 3 "Ändert den Namen der Netzwerkbridge" ${BRIDGE};;
        4\ *) do_menu_expert_changeOption 4 "Ändert die zu installierende Firmwareversion" ${CCU2Version};;
        5\ *) do_menu_expert_gitBranches  5 "Änderung des YAHM-Branches" ${GIT_BRANCH};;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
      esac || whiptail --msgbox "There was an error running option $FUNC" 20 60 1
    else
     return 0
    fi
  done
}

do_menu_expert_gitBranches() {

    GIT_BRANCHES=$(cd ${YAHM_DIR} && git branch | awk -F ' +' '! /\(no branch\)/ {print $2}')

    RADIOLIST=()
    for _branch in $GIT_BRANCHES
    do
        if [ "$_branch" == "$3" ]
        then
            RADIOLIST+=("$_branch" "" "ON")
        else
            RADIOLIST+=("$_branch" "" "OFF")
        fi
    done
    let ARLENGTH=${#RADIOLIST[@]}

    newvalue=$(whiptail --title "$2" --radiolist "Bitte Branch auswählen" 20 50 $ARLENGTH "${RADIOLIST[@]}" --ok-button "Wechseln" --cancel-button "Abbrechen" 3>&1 1>&2 2>&3)
    # check Esc Key first (value will be empty)
    if [ -n "$newvalue" ] 
    then

    status=$(cd ${YAHM_DIR} && git checkout ${newvalue} 2>&1)

    RET=$?
    if [ $RET -eq 0 ]
    then
        progress "Branch was successfully changed. Please restart UI"
        exit
    else
        whiptail --msgbox "There was an error running option:\n $status" 20 60 1
        progress "Exit"
        exit 1
    fi
    fi

}
do_menu_expert_changeOption() {


   newvalue=$(whiptail --inputbox "$2" 8 78 $3 --title "YAHM Experteneinstellungen" 3>&1 1>&2 2>&3)
   if [ -n "$newvalue" ]
   then
   case $1 in
        1)
        LXCNAME=$newvalue
        LXC_ROOT=/var/lib/lxc/$LXCNAME
  		LXC_ROOT_FS=/var/lib/lxc/$LXCNAME/root
  		LXC_ROOT_MODULES=/var/lib/lxc/$LXCNAME/.modules
  		;;
        2)
        
        if [$(grep $newvalue /proc/net/dev |wc -l) -eq 1]
        then
          INTERFACE=$newvalue
        else
          whiptail --msgbox "Netzwerkinterface $newvalue ist nicht vorhanden" --title "Oh noooh !" 20 60 1  
        fi
        ;;
        3)
        BRIDGE=$newvalue;;
        4)
        if [ `yahm_compatibility $newvalue` -eq 0 ]
        then
          CCU2Version=$newvalue
        else
          whiptail --msgbox "Firmwareversion $newvalue wurde nicht gefunden." --title "Uhh that sucks..." 20 60 1  
        fi
          ;;
    esac
    fi
}


do_menu_diag_showFile() {
  value=$(<$1)
  whiptail --msgbox --backtitle $2 "${value}" --scrolltext --title "Information at your fingertips" 30 $WT_WIDTH 2
}

do_menu_status() {
  if [ `check_container_installed` -eq 1 ]; then
    
	CCU2_BRIDGE=`get_ccu2_bridge`
    CCU2_BRIDGE_INTERFACE=`get_bridge_interface $CCU2_BRIDGE`
	update_info
	whiptail --msgbox "
System Status:
    Root Partition..: $(df -h|sed -n 2p|awk '{print $2}')
    Benutzt ........: $(df -h|sed -n 2p|awk '{print $3}')
    Frei ...........: $(df -h|sed -n 2p|awk '{print $4}')
	
YAHM Status:
    GIT Branch .....: ${GIT_BRANCH}
    YAHM Version ...: ${YAHM_VERSION}

CCU2 Container Status:
    CCU Container ..: ${LXCNAME}
    CCU Status .....: ${INFO_STATE}

CCU2 Netzwerk Status:
    CCU IP Adresse .: ${INFO_IP}
    CCU Interface ..: ${CCU2_BRIDGE_INTERFACE}
    CCU Bridge .....: ${CCU2_BRIDGE}
    " --title "Sure u'r waiting for theese Infos ..." 30 60 2
  else 
	whiptail --msgbox " Keinen YAHM Container ${LXCNAME} gefunden." 20 60 2
  fi
}

calc_wt_size

installed_version=`get_yahm_version ${LXCNAME}`

progress "Welcome to YAHM-UI "  

mainoptions=()
mainoptions+=("1 CCU" "CCU Installation / Update / Deinstallation")
mainoptions+=("2 Netzwerk" "Netzwerkeinstellungen")
mainoptions+=("3 Backup" "Datensicherung erstellen oder Rücksichern")
mainoptions+=("4 Module" "Module aktivieren oder deaktivieren")
mainoptions+=("5 Status" "YAHM Status anzeigen")
mainoptions+=("6 Expert" "Experteneinstellungen")
mainoptions+=("7 Diag" "Diagnose")

progress "Update Check" 
if [ `check_git_update` -eq 1 ]
then
 mainoptions+=("8 Update" "Es ist eine neue YAHM Version vorhanden ...")
fi


mainoptions+=("0 Beenden" "YAHM-UI Beenden")
 
progress "Entering main loop"    
while true; do

    FUNC=$(whiptail --title "YAHM Installation und Konfiguration" --menu "Optionen" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --backtitle "YAHM UI" --ok-button Auswählen --nocancel \
    "${mainoptions[@]}"\
      3>&1 1>&2 2>&3)
    RET=$?

    if [ $RET -eq 1 ]; then

      progress "ESC finish" 
      do_finish_menu

    elif [ $RET -eq 0 ]; then
      case "$FUNC" in
        1\ *) do_menu_ccu ;;
        2\ *) do_menu_network ;;
        3\ *) do_menu_backup ;;
        4\ *) do_menu_module ;;
        5\ *) do_menu_status ;;
        6\ *) do_menu_expert ;;
        7\ *) do_menu_diag ;;
        8\ *) do_menu_install_update;;
        0\ *) do_finish_menu ;;
      esac || whiptail --msgbox "There was an error running option $FUNC" 20 60 1
    else
     progress "Exit" 
     exit 1
    fi
  done
progress "Main loop is done" 