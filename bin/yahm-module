#!/bin/bash
#
# Leonid Kogan <leon@leonsio.com>
# Yet Another Homematic Management 
#
# Module management script, install or remove modules for CCU2 container
#

# Stop on Errors
set -e

MODULE=""

# Hilfe Output
show_help ()
{
cat << EOF
YAHM modules management script

Usage Example: 

./yahm-module [FLAG] COMMAND
./yahm-module -n mycccu -m module_name enable

Flags:
-n          - LXC container name.
-f          - Force operation (no halt on errors).
-v          - Verbose output 
-m          - Module name

Commands:
enable      - Enable module
disable     - Disable module
available   - Show available modules
installed   - Show installed modules
EOF
exit 1
}

PARAMETER="m:vfn:"

# Include laden
source /opt/YAHM/share/include.sh

mkdir -p ${LXC_ROOT_MODULES}

_module_installed()
{
    if [ -e ${LXC_ROOT_MODULES}/${MODULE} ] ; then
        echo 1    
    else
        echo 0 
    fi
}

available_modules()
{
    local description
    progress "Available modules:"
    files=`ls ${YAHM_DIR}/share/modules/`
    for file in $files
    do
		 if [[ -f ${YAHM_DIR}/share/modules/${file} ]]; then
	        description=`cat ${YAHM_DIR}/share/modules/${file}  | grep description -m1 | cut -d'"' -f2` 
    	    printf "\t%-20s%s\n" "$file" "$description" 
        fi
    done    
}

installed_modules()
{
    local description
    progress "Installed modules:"
    files=`ls ${LXC_ROOT_MODULES}/`
    for file in $files
    do
    	    description=`cat ${YAHM_DIR}/share/modules/${file}  | grep description -m1 | cut -d'"' -f2`
	        printf "\t%-20s%s\n" "$file" "$description"
    done
}

enable_modules()
{
    if [ "$MODULE" = "" ]
    then
        die "ERROR: Please specify module name with -m MODULE, show available modules with 'yahm-modules available'"
    fi

    if [ `check_yahm_name $LXCNAME` -eq 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: Can not find $LXCNAME container"
    fi

    if [ `_module_installed` -eq 1 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: Module ${MODULE} is already installed, use -f to overwrite it"
    fi

    progress "Executing ${MODULE} module_install()"
    source ${YAHM_DIR}/share/modules/${MODULE}

    _module_install

    info "STATUS: Module ${MODULE} was successfully installed"
    
    touch ${LXC_ROOT_MODULES}/${MODULE}
}

disable_modules()
{   
    if [ "$MODULE" = "" ]
    then
        die "ERROR: Please specify module name with -m MODULE, show available modules with 'yahm-modules available'"
    fi

    if [ `check_yahm_name $LXCNAME` -eq 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: Can not find $LXCNAME container"
    fi

    if [ `_module_installed` -eq 0 ] && [ $IS_FORCE -ne 1 ]
    then
        die "ERROR: Module ${MODULE} is not installed, use -f force this operation"
    fi
    
    progress "Executing ${MODULE} module_remove()"
    source ${YAHM_DIR}/share/modules/${MODULE}

    _module_remove

    rm ${LXC_ROOT_MODULES}/${MODULE}

    info "STATUS: Module ${MODULE} was successfully removed"
}


if [[ $# != 1 ]]; then
    show_help
fi

for key in "$@"; do
    case $key in
        enable)
            enable_modules
            shift
            break;
        ;;
        disable)
            disable_modules
            shift
            break;
        ;;
        available)
            available_modules
            shift
            break;
        ;;  
        installed)
            installed_modules
            shift
            break;
        ;;
        *)
            show_help
            exit 0
        ;;
    esac
done

