#!/bin/bash
#
# Leonid Kogan <leon@leonsio.com>
# Yet Another Homematic Management 
#
# Backup & Restore script, create and remove backups form CCU2 container and CCU2 data
#


# Stop on Errors
set -e

# Hilfe Output
show_help ()
{
cat << EOF
YAHM Control Script

Usage Example: 

./yahm-ctl [FLAG] COMMAND
./yahm-ctl -n mycccu start

Flags:
-n          - LXC container name.
-f          - Force operation (no halt on errors).
-v          - Verbose output 

Commands:
start       - Starting LXC container
stop        - Stopping LXC container
restart     - Restarting LXC container
info        - Show LXC information (IP)
join        - Enter LXC console
update      - Update YAHM installation
EOF
exit 1
}

PARAMETER="vfn:"

# Include laden
source /opt/YAHM/share/include.sh

if [[ $# != 1 ]]; then
    show_help
fi

do_start_container()
{
            if [ $(lxc-info -n ${LXCNAME}|grep RUNNING |wc -l) -eq 1 ]
            then
                die "${LXCNAME} container is already running"
            fi

            if [ "$BOARD_TYPE" = "Raspberry Pi" ] && [ -e ${LXC_ROOT_MODULES}/hm-mod-rpi-pcb ]
            then
                echo 0 > /sys/class/gpio/gpio18/value
                sleep 0.1
                echo 1 > /sys/class/gpio/gpio18/value
            fi

            if [ $IS_VERBOSE -eq 1 ] 
            then
                progress "Starting ${LXCNAME} LXC container in debug mode"
                lxc-start -n ${LXCNAME}
            else
		        mkdir -p /var/log/yahm
                progress "Starting ${LXCNAME} LXC container"
                lxc-start $QUIET -n ${LXCNAME} -d -L /var/log/yahm/${LXCNAME}_console.log
            fi
}

do_stop_container()
{
          if [ $(lxc-info -n ${LXCNAME}|grep STOPPED|wc -l) -eq 1 ]
            then 
                die "${LXCNAME} container is already stopped"
            fi

            if [ "$BOARD_TYPE" = "Raspberry Pi" ] && [ -e ${LXC_ROOT_MODULES}/hm-mod-rpi-pcb ]
            then
                echo 0 > /sys/class/gpio/gpio18/value
            fi

            progress "Stopping ${LXCNAME} LXC container" 
            lxc-stop $QUIET -k -n ${LXCNAME}
}

for key in "$@"; do
    case $key in
        start)
            do_start_container
            shift
            break;
        ;;
        stop)
            do_stop_container
            shift
            break;
        ;;
        restart)
           do_stop_container
           sleep 1
           do_start_container
           shift
           break;
        ;;
        join)
            if [ $(lxc-info -n ${LXCNAME}|grep STOPPED|wc -l) -eq 1 ]
            then
                die "${LXCNAME} container is stopped, please start it first"
            fi
            progress "Joining LXC container, you are now inside ${LXCNAME}"
            lxc-attach -n ${LXCNAME}
            progress "Leaving LXC container, your are now on your host system"
            shift
            break;
        ;;  
        info|status)
            info "YAHM Version: ${YAHM_VERSION}"
            echo ""
            info "LXC container information"
            lxc-info -n ${LXCNAME}
            shift
            break;
        ;;
        update)
            cd ${YAHM_DIR}
            progress "Updating YAHM installation, for updatate CCU2 please use 'yahm-lxc update'"
            git pull
            progress "Updating all YAHM modules"
            git submodule foreach git pull origin master
	    git submodule update --init --recursive
            progress "Updating CCU2-FW archive"
            cd ${YAHM_LIB}
            wget $QUIET -N https://raw.githubusercontent.com/leonsio/CCU2-FW/master/fw.list

            # wir machen nur Updates innerhalb von Releases durch
            if [ "$GIT_BRANCH" != "develop" ]
            then
                if [ ! -f $YAHM_DIR/VERSION ]
                then
                    info "YAHM version 1.0 (or below) found"
                    YAHM_OLD_VERSION="1.0"
                else
                    # wir fangen Update mit der alten Version an
                    YAHM_OLD_VERSION=$YAHM_VERSION
                    info "YAHM version ${YAHM_OLD_VERSION} found"
                fi
                # Aktuelle Version bestimmen, kommt aus dem GIT
                YAHM_NEW_VERSION=$(cat $YAHM_DIR/VERSION)

                if [ $(ver ${YAHM_NEW_VERSION}) -gt $(ver ${YAHM_OLD_VERSION}) ]
                then
                    info "New YAHM version ${YAHM_NEW_VERSION} found, updating"

                    # Für das nächste Release müsste ich mir was besseres einfallen lassen
                    if [ -f ${YAHM_DIR}/share/firmware/patches/YAHM/${YAHM_OLD_VERSION}_${YAHM_NEW_VERSION}.sh ]
                    then
                        progress "Update File ${YAHM_OLD_VERSION}_${YAHM_NEW_VERSION}.sh found, executing"
                        ${YAHM_DIR}/share/firmware/patches/YAHM/${YAHM_OLD_VERSION}_${YAHM_NEW_VERSION}.sh ${YAHM_DIR}
                    fi
                fi
            fi

            shift
            break;
        ;;
        *)
            show_help
            exit 0
        ;;
    esac
done
